<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Manage Users</title>
    <style>
      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #e9ecef;
        color: #495057;
      }

      header {
        background-color: #333;
        color: white;
        padding: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      header h1 {
        display: inline-block;
      }

      header nav {
        float: right;
      }

      header nav a {
        color: white;
        margin-left: 15px;
        text-decoration: none;
      }

      .container {
        width: 90%;
        max-width: 1200px;
        margin: 2em auto;
        padding: 1em;
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
      }

      button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 0.5em 1em;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        transition: background-color 0.3s ease;
      }

      button:hover {
        background-color: #0056b3;
      }

      #userTable {
        margin: 20px 0;
      }

      .user-row {
        background: #f8f9fa;
        padding: 15px;
        margin: 10px 0;
        border-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      .user-row p {
        margin: 0;
        font-size: 1em;
      }

      .user-row button {
        margin-left: 10px;
      }

    
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
        padding-top: 60px;
      }

      .modal-content {
        background-color: #ffffff;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #ddd;
        width: 80%;
        max-width: 600px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      .modal-content h2 {
        margin-top: 0;
      }

      .close {
        color: #aaa;
        float: right;
        font-size: 24px;
        font-weight: bold;
      }

      .close:hover,
      .close:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
      }

      form label {
        display: block;
        margin-bottom: 0.5em;
        font-weight: bold;
      }

      form input,
      form select {
        width: calc(100% - 20px);
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ced4da;
        border-radius: 5px;
        font-size: 1em;
      }

      form button {
        background-color: #28a745;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        transition: background-color 0.3s ease;
      }

      form button:hover {
        background-color: #218838;
      }

      .error-message {
        color: #dc3545;
        font-size: 0.9em;
        margin-top: 10px;
      }

      .success-message {
        color: #28a745;
        font-size: 0.9em;
        margin-top: 10px;
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Manage Users</h1>
      <nav>
        <a href="/admin/dashboard">Dashboard</a>
        <a href="#" id="logout">Logout</a>
      </nav>
    </header>

    <div class="container">
      <button onclick="openCreateUserModal()">Add User</button>

      <div id="userTable">
      </div>

      <div id="createUserModal" class="modal">
        <div class="modal-content">
          <span class="close" onclick="closeCreateUserModal()">&times;</span>
          <h2>Create User</h2>
          <form id="createUserForm">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required />
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required />
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required />
            <label for="role">Role:</label>
            <select id="role" name="role" required>
              <option value="admin">Admin</option>
              <option value="user">User</option>
            </select>
            <button type="submit">Create</button>
            <div id="createUserError" class="error-message"></div>
            <div id="createUserSuccess" class="success-message"></div>
          </form>
        </div>
      </div>

      <div id="updateUserModal" class="modal">
        <div class="modal-content">
          <span class="close" onclick="closeUpdateUserModal()">&times;</span>
          <h2>Update User</h2>
          <form id="updateUserForm">
            <input type="hidden" id="updateUserId" name="userId" />
            <label for="updateUsername">Username:</label>
            <input type="text" id="updateUsername" name="username" required />
            <label for="updateEmail">Email:</label>
            <input type="email" id="updateEmail" name="email" required />
            <label for="updatePassword">Password:</label>
            <input
              type="password"
              id="updatePassword"
              name="password"
              required
            />
            <label for="updateRole">Role:</label>
            <select id="updateRole" name="role" required>
              <option value="admin">Admin</option>
              <option value="user">User</option>
            </select>
            <button type="submit">Update</button>
            <div id="updateUserError" class="error-message"></div>
            <div id="updateUserSuccess" class="success-message"></div>
          </form>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        if (!getAuthToken()) {
          window.location.href = "/login";
        } else {
          fetchUsers();
        }
      });

      function getAuthToken() {
        return localStorage.getItem("token"); 
      }

      function fetchUsers() {
        fetch("/api/admin/users", {
          headers: {
            Authorization: `Bearer ${getAuthToken()}`, 
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Failed to fetch users");
            }
            return response.json();
          })
          .then((users) => {
            const userTable = document.getElementById("userTable");
            userTable.innerHTML = "";
            users.forEach((user) => {
              const userRow = document.createElement("div");
              userRow.className = "user-row";
              userRow.innerHTML = `
              <p>${user.username} (${user.role}) - ${user.email}</p>
              <div>
                <button onclick="openUpdateUserModal('${user.id}', '${user.username}', '${user.email}', '${user.role}')">Edit</button>
                <button onclick="deleteUser('${user.id}')">Delete</button>
              </div>
            `;
              userTable.appendChild(userRow);
            });
          })
          .catch((error) => {
            document.getElementById("createUserError").textContent =
              error.message;
            console.error("Error fetching users:", error);
          });
      }

      function openCreateUserModal() {
        document.getElementById("createUserModal").style.display = "block";
      }

      function closeCreateUserModal() {
        document.getElementById("createUserModal").style.display = "none";
        document.getElementById("createUserError").textContent = "";
        document.getElementById("createUserSuccess").textContent = "";
      }

      function openUpdateUserModal(id, username, email, role) {
        document.getElementById("updateUserId").value = id;
        document.getElementById("updateUsername").value = username;
        document.getElementById("updateEmail").value = email;
        document.getElementById("updateRole").value = role;
        document.getElementById("updateUserModal").style.display = "block";
      }

      function closeUpdateUserModal() {
        document.getElementById("updateUserModal").style.display = "none";
        document.getElementById("updateUserError").textContent = "";
        document.getElementById("updateUserSuccess").textContent = "";
      }

      document
        .getElementById("createUserForm")
        .addEventListener("submit", (event) => {
          event.preventDefault();
          const formData = new FormData(event.target);
          fetch("/api/admin/users", {
            method: "POST",
            body: JSON.stringify(Object.fromEntries(formData)),
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${getAuthToken()}`,
            },
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Failed to create user");
              }
              return response.json();
            })
            .then(() => {
              fetchUsers();
              closeCreateUserModal();
              document.getElementById("createUserSuccess").textContent =
                "User created successfully!";
            })
            .catch((error) => {
              document.getElementById("createUserError").textContent =
                error.message;
              console.error("Error creating user:", error);
            });
        });

      document
        .getElementById("updateUserForm")
        .addEventListener("submit", (event) => {
          event.preventDefault();
          const formData = new FormData(event.target);
          const userId = formData.get("userId");
          fetch(`/api/admin/users/${userId}`, {
            method: "PUT",
            body: JSON.stringify(Object.fromEntries(formData)),
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${getAuthToken()}`,
            },
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Failed to update user");
              }
              return response.json();
            })
            .then(() => {
              fetchUsers();
              closeUpdateUserModal();
              document.getElementById("updateUserSuccess").textContent =
                "User updated successfully!";
            })
            .catch((error) => {
              document.getElementById("updateUserError").textContent =
                error.message;
              console.error("Error updating user:", error);
            });
        });

      function deleteUser(userId) {
        if (confirm("Are you sure you want to delete this user?")) {
          fetch(`/api/admin/users/${userId}`, {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${getAuthToken()}`,
            },
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Failed to delete user");
              }
              return response.json();
            })
            .then(() => fetchUsers())
            .catch((error) => {
              document.getElementById("updateUserError").textContent =
                error.message;
              console.error("Error deleting user:", error);
            });
        }
      }

      document.getElementById("logout").addEventListener("click", (e) => {
        localStorage.clear();
        window.location.href = "/login";
      });
    </script>
  </body>
</html>
